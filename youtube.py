__version__ = (1, 3, 1)

#             ‚ñà ‚ñà ‚ñÄ ‚ñà‚ñÑ‚ñÄ ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÄ‚ñà ‚ñÄ
#             ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÄ‚ñÑ ‚ñà
#              ¬© Copyright 2024
#           https://t.me/apcecoc
#
# üîí      Licensed under the GNU AGPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html

# meta pic: https://example.com/youtube_icon.png
# meta banner: https://example.com/youtube_banner.jpg
# meta developer: @apcecoc
# scope: hikka_only
# scope: hikka_min 1.2.10

import asyncio
import aiohttp
import os
from telethon.tl.types import Message
from .. import loader, utils

@loader.tds
class YouTubeDownloaderMod(loader.Module):
    """Working with YouTube: Search and Download Audio"""

    strings = {
        "name": "YouTubeDownloader",
        "processing": "üîÑ <b>Processing your request...</b>",
        "invalid_query": "‚ùå <b>Invalid query provided.</b>",
        "error": "‚ùå <b>Error occurred while processing your request.</b>",
        "results_found": "üîé <b>Found results for:</b> {query}",
        "no_results": "‚ùå <b>No results found for '{query}'.</b>",
        "audio_success": "üéµ <b>Audio downloaded successfully:</b>",
    }

    strings_ru = {
        "processing": "üîÑ <b>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...</b>",
        "invalid_query": "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.</b>",
        "error": "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>",
        "results_found": "üîé <b>–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è:</b> {query}",
        "no_results": "‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'.</b>",
        "audio_success": "üéµ <b>–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ:</b>",
        "_cls_doc": "–†–∞–±–æ—Ç–∞ —Å YouTube: –ø–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ",
    }

    @loader.command(ru_doc="<–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube> –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ MP4 –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
    async def ytvideo(self, message: Message):
        """<YouTube URL> –°–∫–∞—á–∞—Ç—å MP4 —Ñ–∞–π–ª –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ other"""
        url = utils.get_args_raw(message)
        if not url or not url.startswith("http"):
            await utils.answer(message, self.strings("invalid_query"))
            return

        await utils.answer(message, self.strings("processing"))

        api_url = f"https://api.paxsenix.biz.id/yt/yttomp4?url={url}"
        headers = {"accept": "*/*"}

        max_retries = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        retries = 0

        while retries < max_retries:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(api_url, headers=headers) as resp:
                        if resp.status != 200:
                            raise Exception(f"API request failed with status {resp.status}")

                        data = await resp.json()
                        if not data.get("ok", False) or "other" not in data:
                            await utils.answer(message, self.strings("error"))
                            return

                        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π MP4 —Ñ–∞–π–ª –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 'other'
                        video_url = data["other"][0]["url"]
                        video_name = data["other"][0]["name"]
                        video_size = data["other"][0]["size"]

                        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
                        async with session.get(video_url) as file_resp:
                            if file_resp.status != 200:
                                await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.")
                                return

                            file_path = f"/tmp/{video_name.replace(' ', '_')}.mp4"
                            with open(file_path, "wb") as file:
                                file.write(await file_resp.read())

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —á–∞—Ç
                            await message.client.send_file(
                                message.peer_id,
                                file_path,
                                caption=(
                                    f"üé¨ –í–∏–¥–µ–æ: <b>{data['title']}</b>\n"
                                    f"üïí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']}\n"
                                    f"üìÇ –†–∞–∑–º–µ—Ä: {video_size}\n"
                                    f"üì• –ö–∞—á–µ—Å—Ç–≤–æ: {video_name}"
                                ),
                            )

                            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                            if os.path.exists(file_path):
                                os.remove(file_path)

                            await message.delete()
                            return  # –£—Å–ø–µ—Ö, –≤—ã—Ö–æ–¥–∏–º

            except Exception as e:
                retries += 1
                if retries >= max_retries:
                    await utils.answer(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
                    return
                await asyncio.sleep(3)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

            
    @loader.command(ru_doc="<–ó–∞–ø—Ä–æ—Å> –ù–∞–π—Ç–∏ –≤–∏–¥–µ–æ –Ω–∞ YouTube")
    async def ytsearch(self, message: Message):
        """<Query> Search for YouTube videos"""
        query = utils.get_args_raw(message)
        if not query:
            await utils.answer(message, self.strings("invalid_query"))
            return

        await utils.answer(message, self.strings("processing"))

        api_url = f"https://api.paxsenix.biz.id/yt/search?q={query}"
        headers = {"accept": "*/*"}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, headers=headers) as resp:
                    if resp.status == 200:
                        data = await resp.json()

                        if not data.get("ok", False):
                            await utils.answer(message, self.strings("error"))
                            return

                        results = data.get("results", [])
                        if results:
                            result_text = self.strings("results_found").format(query=query)
                            for idx, result in enumerate(results, 1):
                                result_text += f"\n\n{idx}. <b>{result['title']}</b>"
                                result_text += f"\nüîó <a href='{result['url']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ</a>"
                                result_text += f"\nüë§ –ö–∞–Ω–∞–ª: {result['channelName']}"
                                result_text += f"\nüëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {result['viewCount']}"
                                result_text += f"\nüì∑ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞: {result['thumbnails'][0]['url']}"
                            
                            await utils.answer(message, result_text)
                        else:
                            await utils.answer(message, self.strings("no_results").format(query=query))
                    else:
                        await utils.answer(message, self.strings("error"))
        except Exception as e:
            await utils.answer(message, self.strings("error"))
            raise e

    @loader.command(ru_doc="<–°—Å—ã–ª–∫–∞ –Ω–∞ YouTube> –°–∫–∞—á–∞—Ç—å MP3")
    async def ytaudio(self, message: Message):
        """<YouTube URL> Download MP3 from YouTube"""
        url = utils.get_args_raw(message)
        if not url or not url.startswith("http"):
            await utils.answer(message, self.strings("invalid_query"))
            return

        await utils.answer(message, self.strings("processing"))

        api_url = f"https://api.paxsenix.biz.id/yt/ytconvert?url={url}"
        headers = {"accept": "*/*"}

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(api_url, headers=headers) as resp:
                    if resp.status == 200:
                        data = await resp.json()

                        if not data.get("ok", False) or "url" not in data:
                            await utils.answer(message, self.strings("error"))
                            return

                        download_url = data["url"]

                        async with session.get(download_url) as file_resp:
                            if file_resp.status == 200:
                                file_name = download_url.split("/")[-1].split("?")[0]
                                file_path = f"/tmp/{file_name}"
                                with open(file_path, "wb") as file:
                                    file.write(await file_resp.read())

                                await message.client.send_file(
                                    message.peer_id,
                                    file_path,
                                    caption=self.strings("audio_success"),
                                )

                                # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                                if os.path.exists(file_path):
                                    os.remove(file_path)

                                await message.delete()
                            else:
                                await utils.answer(message, self.strings("error"))
                    else:
                        await utils.answer(message, self.strings("error"))
        except Exception as e:
            await utils.answer(message, self.strings("error"))
            raise e
